/*!
 * blogedit.html 页面脚本.
 * 
 * @since: 1.0.0 2017-03-26
 * @author Way Lau <https://waylau.com>
 */
"use strict";
//# sourceURL=blogedit.js

// DOM 加载完再执行
$(function() {

    var map = null;
    var drawnItems;
    var mapDOMid = '';
    var existPoint = [];
    var existPoint_bak = [];
    var Background = '';
    var Background_bak = '';
    var areaArr = {};
    var areaArr_bak = {};
    var pointAttr = [];
    var savePoint = [];
    var weight = 2;
    var textFontSize_default = 14;
    var colorList = ["#ffbf26","#ff6438","#2cfff5","#c556ff","#ff4c5f","#0bed07","#4d596c","#8AC007","#ccb324","#FFAD5C","#72ff71","#ff78af","#93adff","#ffb3cf"];
    function init(domId,imgUrl,callback) {
        if(typeof(map) != 'undefined' && map != null){map.remove();}
        var _tmpIMG = new Image();
        console.log(imgUrl);
        _tmpIMG.src = imgUrl;
        _tmpIMG.onload = function() {
            var _tmpThis = this;
            var _tmpIMG_width = _tmpThis.width;
            var _tmpIMG_height = _tmpThis.height;
            map = new L.Map(domId, {
                editable: true,
                crs: L.CRS.Simple,
                maxZoom : 5,
                minZoom : -3.5,
                center : [ $('#'+domId).width() / 2, $('#'+domId).height() / 2 ]
            });

//            calculate the edges of the image, in coordinate space
            var southWest = map.unproject([ 0, 0 ], map.getMinZoom() - 5);
            var northEast = map.unproject([ _tmpIMG_width,_tmpIMG_height ], map.getMaxZoom() - 5);
//            var southWest = map.unproject([ 0, _tmpIMG_height ]);
//            var northEast = map.unproject([ _tmpIMG_width, 0 ]);
//            var southWest = map.unproject([ 0, 0 ]);
//            var northEast = map.unproject([ _tmpIMG_width, _tmpIMG_height ]);
            var bounds = new L.LatLngBounds(southWest, northEast);

            // add the image overlay, so that it covers the entire map
            var image = L.imageOverlay(imgUrl, bounds).addTo(map);

            // tell leaflet that the map is exactly as big as the image
            map.setMaxBounds(bounds);
            map.fitBounds(bounds);
            drawnItems = new L.FeatureGroup();
            map.addLayer(drawnItems);

            var drawControl = new L.Control.Draw({
                position: 'topright',
                draw: {
                    polyline: false,
                    polygon:  {
                        allowIntersection: false, // Restricts shapes to simple polygons
                        showArea: true,
                        drawError: {
                            color: '#e1e100', // Color the shape will turn when intersects
                            message: '<strong>错误<strong>，你不能这么画!'
                        },
                        shapeOptions: {
                            weight : weight
                        }
                    },
                    rectangle: {
                        shapeOptions: {
                            /*clickable: false ,*/
                            weight : weight
                        }
                    },
                    circle:false,
                    // {
                    //     shapeOptions: {
                    //         weight : weight
                    //     }
                    // },
                    marker: false
                },
                edit: {
                    featureGroup: drawnItems,
                    poly: {
                        allowIntersection: false
                    },
                    remove: true
                }
            });

            if(map.addControl(drawControl)){
                callback();
            }

            map.on(L.Draw.Event.CREATED, function (e) {
                var type = e.layerType,
                    layer = e.layer;
//                drawnItems.addLayer(layer);
                layer.addTo(drawnItems);
                swal({
                    title:'热点添加成功',
                    position: 'top-end',
                    type: 'success',
                    inputOptions: areaArr,
                    timer: 1000,
                    showCancelButton: true,
                    inputValidator: function (value) {
                        return new Promise(function (resolve, reject) {
                            if (value != '') {
                                resolve();
                            } else {
                                reject('你还没选择呢！');
                            }
                        })
                    }
                }).then(function (result) {
                    layer.bindLabel("bindLabel TODO");
//                        console.log(layer.getBounds().getCenter());//获取中心点
//                        console.log(map.latLngToLayerPoint(layer.getBounds().getCenter()));//获取中心点

                    //添加文字
                    layer.setText(title);

                    pointAttr.push({
                        'leaflet_id': layer._leaflet_id,
                        'type': type,
                        'area': title,
                        'area_id': title
                    });
                    savePoints();
                }, function (dismiss) {
//                        if (dismiss === 'cancel') {
//                            drawnItems.removeLayer(layer);
//                        }
                    drawnItems.removeLayer(layer);
                });
            });
            map.on(L.Draw.Event.EDITED, function (e) {
                var layers = e.layers;
                var countOfEditedLayers = 0;
                layers.eachLayer(function (layer) {
//                    console.log(layer);
                    countOfEditedLayers++;
                });
                console.log("修改了 " + countOfEditedLayers + " 个图层");
            });
        };
    }

    //  解决在使用L.CRS.Simple时，画圆出现的问题
    L.Edit.Circle.include({
        _move: function (latlng) {
            var resizemarkerPoint = this._getResizeMarkerPoint(latlng);

            // Move the resize marker
            this._resizeMarkers[0].setLatLng(resizemarkerPoint);

            // Move the circle
            this._shape.setLatLng(latlng);

            // output the radius, for debugging purpose.
            document.getElementById("radius").innerHTML = this._shape._radius;
        }
    });
    // Correct Leaflet L.Circle for use with flat map. Comment the following function to see the original impact on radius when the circle is dragged along the vertical axis.
    L.Circle.include({
        _getLngRadius: function () {
            return this._getLatRadius();
        }
    });

    //添加文字
    var original_getPathString_circle = L.Circle.prototype.getPathString;

    L.Circle.include({
        getPathString: function () {
            var center = this._point,
                r = this._radius;
            if (this._textNode && this._textNode.parentNode) {
                this._path.parentNode.removeChild(this._textNode);
                delete this._textNode;
            }
//            console.log(center);
//            console.log(map.layerPointToLatLng(center));
            var textNode = L.Path.prototype._createElement('text');

            textNode.setAttribute('text-anchor', 'middle');
            textNode.setAttribute('style', 'font-weight:bold');
            textNode.setAttribute('x', center.x);
            textNode.setAttribute('y', center.y);
//            textNode.setAttribute('font-size', Math.pow(1.16, this._map.getZoom()) );
//            console.log(this._map.getZoom());
            var font_size;
            if(this._map.getZoom()>0){
                font_size = (textFontSize_default+4) * this._map.getZoom()*2;
            }else{
                font_size = textFontSize_default;
            }
            textNode.setAttribute('font-size', font_size );

            textNode.appendChild(document.createTextNode((this.text)?this.text:''));

            this._path.parentNode.appendChild(textNode);

            this._textNode = textNode;

            return original_getPathString_circle.call(this);

        },
        setText: function (text) {
            this.text = text;
            return this.redraw();
        }

    });

    var original_getPathString_rectangle = L.Rectangle.prototype.getPathString;
    L.Rectangle.include({
        getPathString: function () {
            var center = map.latLngToLayerPoint(this.getBounds().getCenter());
            if (this._textNode && this._textNode.parentNode) {
                this._path.parentNode.removeChild(this._textNode);
                delete this._textNode;
            }
//            console.log(center);
//            console.log(map.layerPointToLatLng(center));
            var textNode = L.Path.prototype._createElement('text');

            textNode.setAttribute('text-anchor', 'middle');
            textNode.setAttribute('style', 'font-weight:bold');
            textNode.setAttribute('x', center.x);
            textNode.setAttribute('y', center.y);
//            textNode.setAttribute('font-size', Math.pow(1.16, this._map.getZoom()) );
//            console.log(this._map.getZoom());
            var font_size;
            if(this._map.getZoom()>0){
                font_size = (textFontSize_default+4) * this._map.getZoom()*2;
            }else{
                font_size = textFontSize_default;
            }
            textNode.setAttribute('font-size', font_size );

            textNode.appendChild(document.createTextNode((this.text)?this.text:''));

            this._path.parentNode.appendChild(textNode);

            this._textNode = textNode;

            return original_getPathString_rectangle.call(this);

        },
        setText: function (text) {
            this.text = text;
            return this.redraw();
        }

    });


    var original_getPathString_polygon = L.Polygon.prototype.getPathString;
    L.Polygon.include({
        getPathString: function () {
            var center = map.latLngToLayerPoint(this.getBounds().getCenter());
            if (this._textNode && this._textNode.parentNode) {
                this._path.parentNode.removeChild(this._textNode);
                delete this._textNode;
            }
//            console.log(center);
//            console.log(map.layerPointToLatLng(center));
            var textNode = L.Path.prototype._createElement('text');
//            console.log(textNode);
            textNode.setAttribute('text-anchor', 'middle');
            textNode.setAttribute('style', 'font-weight:bold');
            textNode.setAttribute('x', center.x);
            textNode.setAttribute('y', center.y);
//            textNode.setAttribute('font-size', Math.pow(1.16, this._map.getZoom()) );
//            console.log(this._map.getZoom());
            var font_size;
            if(this._map.getZoom()>0){
                font_size = (textFontSize_default+4) * this._map.getZoom()*2;
            }else{
                font_size = textFontSize_default;
            }
            textNode.setAttribute('font-size', font_size );

            textNode.appendChild(document.createTextNode((this.text)?this.text:''));

            this._path.parentNode.appendChild(textNode);

            this._textNode = textNode;

            var result =  original_getPathString_polygon.call(this);
            console.log(result);
            return result;

        },
        setText: function (text) {
            this.text = text;
            return this.redraw();
        }

    });

    function showPoint(allPoint){
        $.each(allPoint,function(i,n){
            switch(n.type){
                case 'polygon':
                    var points = [];
                    $.each(n.latlngs,function(i,n){
                        points.push([n.lat,n.lng]);
                    });
                    var polygon = new L.Polygon(points,{
                        weight : weight,
                        color : getColorByRandom()
                    }).bindLabel(n.area,{autoPan:false}).setText(n.area);
                    polygon.addTo(drawnItems);
//                    console.log(polygon.getBounds().getCenter());
//                    console.log(polygon);
                    pointAttr.push({
                        'leaflet_id': polygon._leaflet_id,
                        'type': n.type,
                        'area': n.area,
                        'area_id': n.area_id
                    });
                    break;
                case 'rectangle':
                    var points = [];
                    $.each(n.latlngs,function(i,n){
                        points.push([n.lat,n.lng]);
                    });
                    var rectangle = new L.Rectangle(points,{
                        weight : weight,
                        color : getColorByRandom()
                    }).bindLabel(n.area,{autoPan:false}).setText(n.area);
                    rectangle.addTo(drawnItems);
//                    console.log(rectangle.getBounds().getCenter());
                    pointAttr.push({
                        'leaflet_id': rectangle._leaflet_id,
                        'type': n.type,
                        'area': n.area,
                        'area_id': n.area_id
                    });
                    break;
                case 'circle':
                    var circle = new L.Circle([n.lat,n.lng],n.radius,{
                        weight : weight,
                        color : getColorByRandom()
                    }).bindLabel(n.area,{autoPan:false}).setText(n.area);
                    circle.addTo(drawnItems);
//                    console.log(circle.getBounds().getCenter());
//                    console.log(map.latLngToLayerPoint(circle.getBounds().getCenter()));
                    pointAttr.push({
                        'leaflet_id': circle._leaflet_id,
                        'type': n.type,
                        'area': n.area,
                        'area_id': n.area_id
                    });
                    break;
            }
        });
    }

    function savePoints(){
        savePoint = [];
        $.each(drawnItems._layers,function(i,n){
            var attr;
            for(var k=0;k<pointAttr.length;k++){
                if(n._leaflet_id == pointAttr[k].leaflet_id){
                    attr = pointAttr[k];
                    break;
                }
            }
            switch(attr.type){
                case 'circle':
                    savePoint.push({
                        'type': attr.type,
                        'area': attr.area,
                        'area_id': attr.area_id,
                        'lat': n._latlng.lat,
                        'lng': n._latlng.lng,
                        'radius': n._mRadius
                    });
                    break;
                case 'polygon':
                case 'rectangle':
                    var tmp = [];
                    $.each(n._latlngs,function(j,o){
                        tmp[j] = {
                            'lat': o.lat,
                            'lng': o.lng
                        };
                    });
                    savePoint.push({
                        'type': attr.type,
                        'area': attr.area,
                        'area_id': attr.area_id,
                        'latlngs': tmp
                    });
                    break;
            }
        });
        var coordinate = $("#coordinate").val(JSON.stringify(savePoint));
        console.log(coordinate);
    }

    // $('.save').on('click',function(){
    //     swal({
    //         title: '保存修改吗？',
    //         type: 'warning',
    //         showCancelButton: true,
    //         confirmButtonColor: '#3085d6',
    //         cancelButtonColor: '#d33',
    //         confirmButtonText: '确定',
    //         cancelButtonText: '取消',
    //         confirmButtonClass: 'btn btn-success',
    //         cancelButtonClass: 'btn btn-danger',
    //         buttonsStyling: false
    //     }).then(function () {
    //         savePoints();
    //         console.log(savePoint);
    //         console.log(JSON.stringify(savePoint));
    //         localStorage.pointData = JSON.stringify(savePoint);
    //         localStorage.backgroundURL = Background;
    //         localStorage.areaList = JSON.stringify(areaArr);
    //         swal(
    //             '成功',
    //             '版面已修改',
    //             'success'
    //         )
    //     }, function (dismiss) {
    //         // dismiss can be 'cancel', 'overlay',
    //         // 'close', and 'timer'
    //         if (dismiss === 'cancel') {
    //             swal(
    //                 '取消',
    //                 '已取消修改',
    //                 'error'
    //             );
    //         }
    //     })
    // });

    //重置、恢复按钮
    $('.recovery').on('click',function(){
        swal({
            title: '确定要恢复到最初状态吗？',
            text: "区域和选项都恢复到最初状态，需要手动点击保存修改",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            confirmButtonClass: 'btn btn-success',
            cancelButtonClass: 'btn btn-danger',
            buttonsStyling: false
        }).then(function () {
            areaArr = jQuery.extend(true, {}, areaArr_bak);
            $('.areaList').html('');
            $.each(areaArr,function(i,n){
                $('.areaList').append('<li class="areaItem"><button>'+n+'</button></li>');
            });
            init(mapDOMid,Background_bak,function(){
                showPoint(existPoint_bak);
            });
            swal(
                '成功',
                '已恢复到最初状态(需要手动保存)',
                'success'
            )
        }, function (dismiss) {
            // dismiss can be 'cancel', 'overlay',
            // 'close', and 'timer'
            if (dismiss === 'cancel') {
                swal(
                    '取消',
                    '已取消',
                    'error'
                );
            }
        });
    });
    //点击可选区域按钮删除

    function getRandomColor(){//随机颜色
        return '#'+Math.floor(Math.random()*16777215).toString(16);
    }
    function getColorByRandom(){//随机取出列表内的颜色
        var colorIndex = Math.floor(Math.random()*colorList.length);
        var color = colorList[colorIndex];
//        colorList.splice(colorIndex,1);//除去抽中项
        return color;
    }
    $(document).ready(function(){
        mapDOMid = 'image-map';
        existPoint = JSON.parse(coordinate);
        Background = pageImagePath;
        console.log(existPoint);
        //数据备份
        existPoint_bak = existPoint;
        Background_bak = Background;
        areaArr_bak = jQuery.extend(true, {}, areaArr);
        init(mapDOMid,Background,function(){
            showPoint(existPoint);
        });

    });

});